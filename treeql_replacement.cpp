// OK.  I'm'a want some nice global variables here.

class set_of_runs
{
private:
public:
	const static int n_runs = 517;

	bool compton_edge_ok[n_runs];
	double OP_Delay[n_runs];
	//
	int sumdiff_set[n_runs];
	double x_sumdiff_min[n_runs];  // done.
	double x_sumdiff_max[n_runs];  // done.
	double z_sumdiff_min[n_runs];  // done.
	double z_sumdiff_max[n_runs];  // done.
	double x_sumdiff_mean[n_runs]; 
	double z_sumdiff_mean[n_runs]; 
	
	
	bool good_recoil[n_runs];      
	bool good_electron[n_runs]; // done.
	int unix_start[n_runs];     // done.
	int unix_stop[n_runs];      // done.
	
	double PI_x[n_runs];
	double PI_sigma_x[n_runs];
	double PI_z[n_runs];
	double PI_sigma_z[n_runs];
	double PI_tof[n_runs];
	double PI_sigma_tof[n_runs];
	
	void init_sumdiffs();
	void init_goodrecoil();        
	void init_goodelectron();   // done.
	void init_unixtime();       // done.
	void init_trapposition();
	
	double iqdc_min[n_runs];
	double iqdc_max[n_runs];
	void init_iqdc();
	
	bool usable[n_runs];
	void init_usable();
	
	double ElectricField[n_runs];
	void init_ElectricField();
	
	set_of_runs();	// done.
};

void set_of_runs::init_unixtime()
{
	for(int i=0; i<n_runs; i++)
	{
		unix_start[i] = 0;
		unix_stop[i] = 0;
	}
	
	unix_start[303] = 1402221986;
	unix_stop[303]  = 1402223369;
	unix_start[308] = 1402224052;
	unix_stop[308]  = 1402224712;
	unix_start[309] = 1402224852;
	unix_stop[309]  = 1402225972;
	unix_start[310] = 1402226086;
	unix_stop[310]  = 1402227035;
	unix_start[311] = 1402227610;
	unix_stop[311]  = 1402230530;
	unix_start[312] = 1402230640;
	unix_stop[312]  = 1402231149;
	unix_start[313] = 1402231184;
	unix_stop[313]  = 1402232757;
	unix_start[314] = 1402251821;
	unix_stop[314]  = 1402255014;
	unix_start[318] = 1402261843;
	unix_stop[318]  = 1402265603;
	unix_start[326] = 1402270263;
	unix_stop[326]  = 1402271614;
	unix_start[327] = 1402276252;
	unix_stop[327]  = 1402279408;
	unix_start[328] = 1402280134;
	unix_stop[328]  = 1402287542;
	unix_start[340] = 1402294760;
	unix_stop[340]  = 1402298450;
	unix_start[342] = 1402301604;
	unix_stop[342]  = 1402304029;
	unix_start[343] = 1402304606;
	unix_stop[343]  = 1402308315;
	unix_start[361] = 1402331343;
	unix_stop[361]  = 1402332839;
	unix_start[362] = 1402335507;
	unix_stop[362]  = 1402338055;
	unix_start[363] = 1402338124;
	unix_stop[363]  = 1402342800;
	unix_start[368] = 1402352126;
	unix_stop[368]  = 1402355177;
	unix_start[370] = 1402356790;
	unix_stop[370]  = 1402358747;
	unix_start[371] = 1402358878;
	unix_stop[371]  = 1402362095;
	unix_start[376] = 1402363468;
	unix_stop[376]  = 1402364762;
	unix_start[377] = 1402365168;
	unix_stop[377]  = 1402367035;
	unix_start[378] = 1402367258;
	unix_stop[378]  = 1402369291;
	unix_start[383] = 1402373907;
	unix_stop[383]  = 1402377593;
	unix_start[384] = 1402377802;
	unix_stop[384]  = 1402379836;
	unix_start[385] = 1402380497;
	unix_stop[385]  = 1402381574;
	unix_start[386] = 1402383062;
	unix_stop[386]  = 1402387897;
	unix_start[393] = 1402388633;
	unix_stop[393]  = 1402393117;
	unix_start[394] = 1402396832;
	unix_stop[394]  = 1402399042;
	unix_start[395] = 1402399065;
	unix_stop[395]  = 1402400944;
	unix_start[396] = 1402401038;
	unix_stop[396]  = 1402402931;
	unix_start[398] = 1402403329;
	unix_stop[398]  = 1402405526;
	unix_start[399] = 1402405641;
	unix_stop[399]  = 1402407770;
	unix_start[400] = 1402407897;
	unix_stop[400]  = 1402409742;
	unix_start[401] = 1402409856;
	unix_stop[401]  = 1402412055;
	unix_start[402] = 1402412173;
	unix_stop[402]  = 1402414371;
	unix_start[409] = 1402444610;
	unix_stop[409]  = 1402446224;
	unix_start[410] = 1402446330;
	unix_stop[410]  = 1402447420;
	unix_start[411] = 1402447436;
	unix_stop[411]  = 1402447980;
	unix_start[412] = 1402448151;
	unix_stop[412]  = 1402450167;
	unix_start[413] = 1402450286;
	unix_stop[413]  = 1402453958;
	unix_start[414] = 1402454208;
	unix_stop[414]  = 1402454729;
	unix_start[415] = 1402454798;
	unix_stop[415]  = 1402455865;
	unix_start[416] = 1402456772;
	unix_stop[416]  = 1402460499;
	unix_start[417] = 1402460557;
	unix_stop[417]  = 1402464269;
	unix_start[418] = 1402464425;
	unix_stop[418]  = 1402468369;
	unix_start[419] = 1402468392;
	unix_stop[419]  = 1402470580;
	unix_start[420] = 1402472894;
	unix_stop[420]  = 1402475427;
	unix_start[421] = 1402480094;
	unix_stop[421]  = 1402484085;
	unix_start[422] = 1402484218;
	unix_stop[422]  = 1402487768;
	unix_start[423] = 1402488391;
	unix_stop[423]  = 1402492122;
	unix_start[424] = 1402492552;
	unix_stop[424]  = 1402495920;
	unix_start[425] = 1402496034;
	unix_stop[425]  = 1402499370;
	unix_start[426] = 1402499468;
	unix_stop[426]  = 1402503201;
	unix_start[428] = 1402505809;
	unix_stop[428]  = 1402509564;
	unix_start[429] = 1402509818;
	unix_stop[429]  = 1402513476;
	unix_start[430] = 1402513631;
	unix_stop[430]  = 1402517437;
	unix_start[431] = 1402517591;
	unix_stop[431]  = 1402521328;
	unix_start[432] = 1402521736;
	unix_stop[432]  = 1402525146;
	unix_start[433] = 1402525546;
	unix_stop[433]  = 1402528431;
	unix_start[434] = 1402528651;
	unix_stop[434]  = 1402528831;
	unix_start[435] = 1402528852;
	unix_stop[435]  = 1402531511;
	unix_start[436] = 1402531757;
	unix_stop[436]  = 1402535852;
	unix_start[437] = 1402536087;
	unix_stop[437]  = 1402539774;
	unix_start[440] = 1402541402;
	unix_stop[440]  = 1402544993;
	unix_start[441] = 1402545180;
	unix_stop[441]  = 1402546613;
	unix_start[442] = 1402547323;
	unix_stop[442]  = 1402548647;
	unix_start[443] = 1402549499;
	unix_stop[443]  = 1402552199;
	unix_start[444] = 1402552513;
	unix_stop[444]  = 1402555846;
	unix_start[445] = 1402556667;
	unix_stop[445]  = 1402557692;
	unix_start[446] = 1402561972;
	unix_stop[446]  = 1402563534;
	unix_start[447] = 1402563701;
	unix_stop[447]  = 1402567325;
	unix_start[449] = 1402567801;
	unix_stop[449]  = 1402571625;
	unix_start[450] = 1402585821;
	unix_stop[450]  = 1402589949;
	unix_start[454] = 1402606618;
	unix_stop[454]  = 1402609355;
	unix_start[455] = 1402609556;
	unix_stop[455]  = 1402612834;
	unix_start[460] = 1402615531;
	unix_stop[460]  = 1402619104;
	unix_start[461] = 1402619485;
	unix_stop[461]  = 1402621330;
	unix_start[462] = 1402621525;
	unix_stop[462]  = 1402625073;
	unix_start[463] = 1402625689;
	unix_stop[463]  = 1402629293;
	unix_start[464] = 1402629945;
	unix_stop[464]  = 1402633663;
	unix_start[465] = 1402633797;
	unix_stop[465]  = 1402637285;
	unix_start[466] = 1402637500;
	unix_stop[466]  = 1402640966;
	unix_start[473] = 1402645998;
	unix_stop[473]  = 1402646765;
	unix_start[474] = 1402646901;
	unix_stop[474]  = 1402650169;
	unix_start[476] = 1402652506;
	unix_stop[476]  = 1402656888;
	unix_start[477] = 1402657024;
	unix_stop[477]  = 1402659220;
	unix_start[478] = 1402661060;
	unix_stop[478]  = 1402664567;
	unix_start[479] = 1402664846;
	unix_stop[479]  = 1402668372;
	unix_start[480] = 1402668469;
	unix_stop[480]  = 1402671716;
	unix_start[481] = 1402672248;
	unix_stop[481]  = 1402673043;
	unix_start[482] = 1402673575;
	unix_stop[482]  = 1402675699;
	unix_start[483] = 1402676686;
	unix_stop[483]  = 1402680376;
	unix_start[484] = 1402680528;
	unix_stop[484]  = 1402683736;
	unix_start[485] = 1402684424;
	unix_stop[485]  = 1402689062;
	unix_start[486] = 1402689265;
	unix_stop[486]  = 1402692423;
	unix_start[487] = 1402692663;
	unix_stop[487]  = 1402693425;
	unix_start[488] = 1402693471;
	unix_stop[488]  = 1402694223;
	unix_start[489] = 1402694243;
	unix_stop[489]  = 1402694948;
	unix_start[491] = 1402698356;
	unix_stop[491]  = 1402699476;
	unix_start[497] = 1402701711;
	unix_stop[497]  = 1402702088;
	unix_start[498] = 1402702113;
	unix_stop[498]  = 1402704078;
	unix_start[499] = 1402704287;
	unix_stop[499]  = 1402704845;
	unix_start[502] = 1402708215;
	unix_stop[502]  = 1402711889;
	unix_start[503] = 1402712078;
	unix_stop[503]  = 1402714093;
	unix_start[504] = 1402714338;
	unix_stop[504]  = 1402719734;
	unix_start[505] = 1402719832;
	unix_stop[505]  = 1402722613;
	unix_start[509] = 1402739164;
	unix_stop[509]  = 1402740801;
	unix_start[510] = 1402741781;
	unix_stop[510]  = 1402747671;
	unix_start[513] = 1402751156;
	unix_stop[513]  = 1402752497;
}

void set_of_runs::init_trapposition()
{
	for(int i=0; i<n_runs; i++)
	{
		PI_x[i] = 0;
		PI_z[i] = 0;
		PI_tof[i] = 0;
		PI_sigma_x[i] = 0;
		PI_sigma_z[i] = 0;
		PI_sigma_tof[i] = 0;
	}
}

void set_of_runs::init_sumdiffs()
{
	// cuts are created using the "recoils only" spectra.
	for(int i=0; i<n_runs; i++)
	{
		sumdiff_set[i] = 0;
		x_sumdiff_min[i] = 0.0;
		x_sumdiff_max[i] = 0.0;
		z_sumdiff_min[i] = 0.0;
		z_sumdiff_max[i] = 0.0;
		x_sumdiff_mean[i] = 0.0; 
		z_sumdiff_mean[i] = 0.0; 
		
		if(i<342)
		{
			// did not actually check these here.  Now I did.  They bias TOF.
			x_sumdiff_min[i] = -1107.0;
			x_sumdiff_max[i] = -812.0;
			z_sumdiff_min[i] = -509.0;
			z_sumdiff_max[i] = -206.0;
			x_sumdiff_mean[i] = -930.598; 
			z_sumdiff_mean[i] = -322.556; 
		}
		else if(i>=342 && i<=368)
		{
			sumdiff_set[i] = 1;
			// did not actually check these here.  Now I did.  They bias TOF.
			x_sumdiff_min[i] = -1107.0;
			x_sumdiff_max[i] = -812.0;
			z_sumdiff_min[i] = -509.0;
			z_sumdiff_max[i] = -206.0;
			x_sumdiff_mean[i] = -930.598; 
			z_sumdiff_mean[i] = -322.556; 
		}
		else if(i>368 && i<=449)  // contains all of 535 + "most" of 395
		{
			sumdiff_set[i] = 2;   // split??  ... no, most are just double-peaked.
			/*
			// using "recoils only" sums.
			// x: max:  x~-904, y~7659.
			// x: 1% at 77:  -1107, -812
			1  Constant     7.97274e+03   1.45735e+01   0.00000e+00  -1.15903e-08
			2  Mean        -9.30598e+02   9.26961e-02   0.00000e+00  -1.20227e-05
			3  Sigma        4.50505e+01   4.78554e-02  -0.00000e+00   9.13269e-04
			*/
			x_sumdiff_min[i] = -1107.0;
			x_sumdiff_max[i] =  -812.0;
			/*
			// z: max:  x~-302, y~-7696.
			// z:  1% at 77:  -509, -206
			1  Constant     8.06795e+03   1.45258e+01  -0.00000e+00   1.77857e-08
			2  Mean        -3.22556e+02   9.07358e-02  -0.00000e+00   1.89920e-05
			3  Sigma        4.33450e+01   4.24046e-02   0.00000e+00  -4.77916e-03
			*/
			z_sumdiff_min[i] = -509.0;
			z_sumdiff_max[i] = -206.0;
			
			x_sumdiff_mean[i] = -930.598; 
			z_sumdiff_mean[i] = -322.556; 
		}
		else if(i==450)  // 395
		{
			sumdiff_set[i] = 3;
			/*
			// x:  max:  x~-883, y=2079.
			// x:  1% at 21:  -1095, -796.
			1  Constant     1.92812e+03   7.76429e+00   3.09076e-01   3.93576e-07
			2  Mean        -9.08836e+02   1.91320e-01   7.15720e-03   1.93540e-04
			3  Sigma        4.46323e+01   1.17634e-01   2.55442e-05   3.94055e-02
			*/
			x_sumdiff_min[i] = -1095.0;
			x_sumdiff_max[i] =  -796.0;
			/*
			// z:  max:  x~-272, y=1597.
			// z:  1% at 16:  -503, -185.
			1  Constant     1.52950e+03   6.65896e+00   0.00000e+00  -2.98355e-09
			2  Mean        -3.07042e+02   2.31308e-01   0.00000e+00   2.25597e-05
			3  Sigma        4.61571e+01   1.27832e-01  -0.00000e+00   9.29244e-03
			*/
			z_sumdiff_min[i] = -503.0;
			z_sumdiff_max[i] = -185.0;
			
			x_sumdiff_mean[i] = -908.836; 
			z_sumdiff_mean[i] = -307.042; 
		}
		else if(i>450 && i<=465) // 395, 415
		{
			sumdiff_set[i] = 4;   // split??  ..no, just double-peaked.
			/*
			// x:  max:  x~-865, y=5885
			// x:  1% at 59:  -1095, -784
			1  Constant     5.90446e+03   1.30596e+01   0.00000e+00   3.76755e-09
			2  Mean        -9.02161e+02   1.17982e-01   0.00000e+00  -2.13032e-06
			3  Sigma        4.47743e+01   6.15389e-02  -0.00000e+00   7.21397e-04
			*/
			x_sumdiff_min[i] = -1095.0;
			x_sumdiff_max[i] =  -784.0;
			/*
			// z:  max:  x~-261, y=5711
			// z:  1% at 57:  -479, -180
			1  Constant     5.94610e+03   1.23461e+01  -0.00000e+00   2.02776e-08
			2  Mean        -2.99396e+02   1.05357e-01  -0.00000e+00   6.76870e-06
			3  Sigma        4.47357e+01   5.12118e-02   0.00000e+00  -2.07758e-03
			*/
			z_sumdiff_min[i] = -479.0;
			z_sumdiff_max[i] = -180.0;
			
			x_sumdiff_mean[i] = -902.161; 
			z_sumdiff_mean[i] = -299.396; 
		}
		else if(i==466) // 415
		{
			sumdiff_set[i] = 5;  // "split?"  ...yeah, no.
			/*
			// x:  max:  x~-854, y=1762
			// x:  1% at 18:  -1095, -778
			1  Constant     1.61514e+03   6.87336e+00   0.00000e+00  -6.15822e-09
			2  Mean        -8.96444e+02   2.42204e-01   0.00000e+00   8.35705e-07
			3  Sigma        4.47080e+01   1.19322e-01  -0.00000e+00   1.92561e-02
			*/
			x_sumdiff_min[i] = -1095.0;
			x_sumdiff_max[i] =  -778.0;
			/*
			// z:  max:  x~-253, y=1717
			// z:  1% at 17:  -487, -174
			1  Constant     1.60307e+03   6.71826e+00  -0.00000e+00   2.26346e-08
			2  Mean        -2.90987e+02   2.27861e-01  -0.00000e+00   4.04235e-06
			3  Sigma        4.48301e+01   1.14282e-01   0.00000e+00  -8.69599e-04
			*/
			z_sumdiff_min[i] = -487.0;
			z_sumdiff_max[i] = -174.0;
			
			x_sumdiff_mean[i] = -896.444; 
			z_sumdiff_mean[i] = -290.987; 
		}
		else if(i==473)  // 415
		{
			sumdiff_set[i] = 6;
			/*
			// x:  max:  x~-907, y=1201
			// x:  1% at 12:  -1153, -812
			1  Constant     1.28859e+03   5.55548e+00   2.44310e-01  -3.60020e-06
			2  Mean        -9.41541e+02   2.54065e-01   9.68143e-03   8.92451e-05
			3  Sigma        5.07388e+01   1.28870e-01   2.59446e-05   7.31778e-04
			*/
			x_sumdiff_min[i] = -1153.0;
			x_sumdiff_max[i] =  -812.0;
			/*
			// z:  max:  x~-293, y=1255
			// z:  1% at 13:  -543, -202
			1  Constant     1.30643e+03   5.73690e+00   2.58211e-01   3.97760e-05
			2  Mean        -3.30089e+02   2.54647e-01   9.69031e-03  -6.45268e-04
			3  Sigma        4.86857e+01   1.27063e-01   2.60405e-05  -2.52527e-01
			*/
			z_sumdiff_min[i] = -543.0;
			z_sumdiff_max[i] = -202.0;
			
			x_sumdiff_mean[i] = -941.541; 
			z_sumdiff_mean[i] = -330.089; 
		}
		else if(i==474)  // 415
		{
			sumdiff_set[i] = 6;
			/*
			// x:  max:  x~-907, y=4429
			// x:  1% at 44:  -1155, -810
			1  Constant     4.87626e+03   1.08887e+01  -0.00000e+00  -8.70551e-09
			2  Mean        -9.41400e+02   1.38128e-01  -0.00000e+00  -2.03665e-07
			3  Sigma        4.92672e+01   6.39343e-02   0.00000e+00  -8.07806e-04
			*/
			x_sumdiff_min[i] = -1155.0;
			x_sumdiff_max[i] =  -810.0;
			/*
			// z:  max:  x~-293, y=4520
			// z:  1% at 45:  -565, -204
			1  Constant     4.86329e+03   1.12007e+01   0.00000e+00  -1.68468e-09
			2  Mean        -3.29100e+02   1.41500e-01   0.00000e+00  -1.61894e-06
			3  Sigma        4.69430e+01   6.31142e-02  -0.00000e+00   9.04146e-02
			*/
			z_sumdiff_min[i] = -565.0;
			z_sumdiff_max[i] = -204.0;
			
			x_sumdiff_mean[i] = -941.400; 
			z_sumdiff_mean[i] = -329.100; 
		}
		else if(i>474 && i<=498)  // 415
		{
			sumdiff_set[i] = 8;
			/*
			// x:  max:  x~-931, y=746
			// x:  1% at 7:  -1123, -808
			1  Constant     7.67461e+02   4.11984e+00   8.11540e-02  -5.01758e-06
			2  Mean        -9.44125e+02   2.63482e-01   5.51262e-03  -2.71914e-06
			3  Sigma        5.18139e+01   1.54422e-01   1.72440e-05   5.98827e-03
			*/
			x_sumdiff_min[i] = -1123.0;
			x_sumdiff_max[i] =  -808.0;
			/*
			// z:  max:  x~313, y=792
			// z:  1% at 8:  -507, -208
			1  Constant     8.23185e+02   4.44153e+00   7.58425e-02  -4.26713e-05
			2  Mean        -3.31241e+02   2.37341e-01   4.43004e-03   9.64609e-04
			3  Sigma        4.78637e+01   1.43332e-01   1.46786e-05  -5.47927e-03
			*/
			z_sumdiff_min[i] = -507.0;
			z_sumdiff_max[i] = -208.0;
			
			x_sumdiff_mean[i] = -944.125; 
			z_sumdiff_mean[i] = -331.241; 
		}
		else if(i==499) // 415
		{
			sumdiff_set[i] = 9;  // nothing passes cuts.
		}
		else if(i==509)  // 415  // nothing passes cuts.
		{
			sumdiff_set[i] = 10;
		}
	}
	// ok, now later on I can actually put in values.
}
/*
void set_of_runs::init_xsumdiff_min()
{
	double arr[517] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1080.0, 0.0, 0.0, 0.0, 0.0, -1050.0, -1050.0, -1050.0, -1050.0, -1050.0, -1050.0, 0.0, 0.0, 0.0, 0.0, -1150.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1150.0, -1300.0, -1340.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1270.0, 0.0, -1300.0, -1300.0, -1300.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1300.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1300.0, 0.0, -1100.0, -1100.0, 0.0, 0.0, 0.0, 0.0, -1100.0, -1100.0, -1100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1100.0, -1100.0, -1100.0, 0.0, -1100.0, -1100.0, -1100.0, -1100.0, -1100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1100.0, -1100.0, -1100.0, -1100.0, -1100.0, -1100.0, -1100.0, -1100.0, -1100.0, -1100.0, -1100.0, 0.0, -1100.0, -1100.0, -1100.0, -1100.0, -1100.0, -1100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1100.0, -1100.0, 0.0, -1100.0, -1120.0, 0.0, 0.0, 0.0, -1100.0, -1100.0, 0.0, 0.0, 0.0, 0.0, -1120.0, -1120.0, -1120.0, -1120.0, -1120.0, -1120.0, -1140.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1160.0, -1200.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1120.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1120.0, -1120.0, -1120.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1160.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
	
	for (int i=0; i <517; i++)
	{
		x_sumdiff_min[i] = arr[i];
	}
}
void set_of_runs::init_xsumdiff_max()
{
	double arr[517] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -840.0, 0.0, 0.0, 0.0, 0.0, -840.0, -840.0, -840.0, -840.0, -840.0, -840.0, 0.0, 0.0, 0.0, 0.0, -830.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -840.0, -910.0, -910.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -890.0, 0.0, -980.0, -980.0, -980.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -980.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1000.0, 0.0, -810.0, -810.0, 0.0, 0.0, 0.0, 0.0, -810.0, -810.0, -810.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -810.0, -800.0, -810.0, 0.0, -810.0, -810.0, -810.0, -810.0, -810.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -810.0, -810.0, -810.0, -810.0, -810.0, -810.0, -810.0, -810.0, -810.0, -810.0, -810.0, 0.0, -810.0, -810.0, -810.0, -810.0, -810.0, -810.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -810.0, -810.0, 0.0, -810.0, -770.0, 0.0, 0.0, 0.0, -770.0, -770.0, 0.0, 0.0, 0.0, 0.0, -770.0, -770.0, -770.0, -770.0, -770.0, -770.0, -770.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -780.0, -790.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -770.0, 0.0, 0.0, 0.0, 0.0, 0.0, -770.0, -770.0, -800.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -790.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
	
	for (int i=0; i <517; i++)
	{
		x_sumdiff_max[i] = arr[i];
	}
}
void set_of_runs::init_zsumdiff_min()
{
	double arr[517] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -470.0, 0.0, 0.0, 0.0, 0.0, -470.0, -470.0, -470.0, -470.0, -450.0, -450.0, 0.0, 0.0, 0.0, 0.0, -530.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -530.0, -700.0, -740.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -670.0, 0.0, -660.0, -660.0, -660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -660.0, 0.0, -500.0, -500.0, 0.0, 0.0, 0.0, 0.0, -500.0, -500.0, -500.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -500.0, -500.0, -500.0, 0.0, -500.0, -500.0, -500.0, -500.0, -500.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -500.0, -500.0, -500.0, -500.0, -500.0, -500.0, -500.0, -500.0, -500.0, -500.0, -500.0, 0.0, -500.0, -500.0, -500.0, -500.0, -500.0, -500.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -500.0, -500.0, 0.0, -500.0, -530.0, 0.0, 0.0, 0.0, -500.0, -500.0, 0.0, 0.0, 0.0, 0.0, -500.0, -500.0, -500.0, -500.0, -500.0, -500.0, -540.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -550.0, -600.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -500.0, 0.0, 0.0, 0.0, 0.0, 0.0, -500.0, -500.0, -500.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -580.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
	
	for (int i=0; i <517; i++)
	{
		z_sumdiff_min[i] = arr[i];
	}
}
void set_of_runs::init_zsumdiff_max()
{
	double arr[517] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -230.0, 0.0, 0.0, 0.0, 0.0, -230.0, -220.0, -230.0, -220.0, -230.0, -230.0, 0.0, 0.0, 0.0, 0.0, -230.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -230.0, -320.0, -320.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -310.0, 0.0, -380.0, -370.0, -380.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -390.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -400.0, 0.0, -200.0, -200.0, 0.0, 0.0, 0.0, 0.0, -200.0, -200.0, -200.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -200.0, -200.0, -200.0, 0.0, -200.0, -200.0, -200.0, -200.0, -200.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -200.0, -200.0, -200.0, -200.0, -200.0, -200.0, -200.0, -200.0, -200.0, -200.0, -200.0, 0.0, -200.0, -200.0, -200.0, -200.0, -200.0, -200.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -200.0, -200.0, 0.0, -200.0, -170.0, 0.0, 0.0, 0.0, -170.0, -170.0, 0.0, 0.0, 0.0, 0.0, -170.0, -170.0, -170.0, -170.0, -170.0, -170.0, -160.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -180.0, -180.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -170.0, 0.0, 0.0, 0.0, 0.0, 0.0, -170.0, -170.0, -200.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -170.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
	
	for (int i=0; i <517; i++)
	{
		z_sumdiff_max[i] = arr[i];
	}
}
*/

void set_of_runs::init_goodelectron()
{
	for(int i=0; i<n_runs; i++)
	{
		good_electron[i] = false;
	}
	
	good_electron[314] = true;
	good_electron[362] = true;
	good_electron[363] = true;
	
	for(int i=383; i<=386; i++)
	{
		good_electron[i] = true;
	}
	good_electron[393] = true;
	good_electron[420] = true;
	for(int i=428; i<=437; i++)
	{
		good_electron[i] = true;
	}	
	for(int i=440; i<=445; i++)
	{
		good_electron[i] = true;
	}	
	for(int i=476; i<=489; i++)
	{
		good_electron[i] = true;
	}	
	for(int i=502; i<=505; i++)
	{
		good_electron[i] = true;
	}	
	good_electron[510] = true;
	good_electron[513] = true;
}

void set_of_runs::init_goodrecoil()
{
	for(int i=0; i<n_runs; i++)
	{
		good_recoil[i] = false;
	}	
	good_recoil[303] = true;
	good_recoil[308] = true;
	good_recoil[309] = true;
	good_recoil[310] = true;
	good_recoil[311] = true;
	good_recoil[312] = true;
	good_recoil[313] = true;
	good_recoil[318] = true;
	good_recoil[326] = true;
	good_recoil[327] = true;
	good_recoil[328] = true;
	good_recoil[340] = true;
	good_recoil[342] = true;
	good_recoil[343] = true;
	good_recoil[361] = true;
	good_recoil[368] = true;
	good_recoil[370] = true;
	good_recoil[371] = true;
	good_recoil[376] = true;
	good_recoil[377] = true;
	good_recoil[378] = true;  // really??  is this ok??
	good_recoil[394] = true;
	good_recoil[395] = true;
	good_recoil[396] = true;
	for(int i=398; i<=402; i++)
	{
		good_recoil[i] = true;
	}
	for(int i=409; i<=419; i++)
	{
		good_recoil[i] = true;
	}
	for(int i=421; i<=426; i++)
	{
		good_recoil[i] = true;
	}
	good_recoil[446] = true;
	good_recoil[447] = true;
	good_recoil[449] = true;
	good_recoil[450] = true;
	good_recoil[454] = true;
	good_recoil[455] = true;
	for(int i=460; i<=466; i++)
	{
		good_recoil[i] = true;
	}
	good_recoil[473] = true;
	good_recoil[474] = true;
	good_recoil[491] = true;
	good_recoil[497] = true;
	good_recoil[498] = true;
	good_recoil[499] = true;
	good_recoil[509] = true;
}

void set_of_runs::init_ElectricField()
{
	for(int i=0; i<n_runs; i++)
	{
		ElectricField[i] = 0.0;
	}
	
	for(int i=298; i<=313; i++)
	{
		ElectricField[i] = 395.0;
	}
	ElectricField[314] = 66.7;
	for(int i=316; i<=361; i++)
	{
		ElectricField[i] = 395.0;
	}
	for(int i=362; i<=367; i++)
	{
		ElectricField[i] = 66.7;
	}
	for(int i=368; i<=378; i++)
	{
		ElectricField[i] = 395.0;
	}
	for(int i=379; i<=393; i++)
	{
		ElectricField[i] = 66.7;
	}
	for(int i=394; i<=405; i++)
	{
		ElectricField[i] = 395.0;
	}

	for(int i=409; i<=419; i++)
	{
		ElectricField[i] = 535.0;
	}
	ElectricField[420] = 66.7;
	for(int i=421; i<=426; i++)
	{
		ElectricField[i] = 535.0;
	}
	for(int i=427; i<=445; i++)
	{
		ElectricField[i] = 150.0;
	}
	for(int i=446; i<=449; i++)
	{
		ElectricField[i] = 535.0;
	}
	for(int i=450; i<=457; i++)
	{
		ElectricField[i] = 395.0;
	}
	for(int i=459; i<=475; i++)
	{
		ElectricField[i] = 415.0;
	}
	for(int i=476; i<=489; i++)
	{
		ElectricField[i] = 150.0;
	}
	for(int i=491; i<=499; i++)
	{
		ElectricField[i] = 415.0;
	}
	for(int i=502; i<=507; i++)
	{
		ElectricField[i] = 150.0;
	}
	ElectricField[509] = 415.0;
	for(int i=510; i<=516; i++)
	{
		ElectricField[i] = 150.0;
	}
}

void set_of_runs::init_usable()
{
	for(int i=0; i<n_runs; i++)
	{
		usable[i] = true;
		if(/*i==361 || i==368 || i==370 || i==371*/ i<=371 || i==497)
		{
			usable[i] = false;
		}
	}
}

void set_of_runs::init_iqdc()
{
	for(int i=0; i<n_runs; i++)
	{
		// Defaults:
		iqdc_min[i] = 0.0;
		iqdc_max[i] = 500.0;
		
		if(i>=376 && i<=449)
		{
			iqdc_min[i] = 192;
			iqdc_max[i] = 280;
		}
	}
}

set_of_runs::set_of_runs()
{
	// Compton Edge.
	for(int i=0; i<361; i++)
	{
		compton_edge_ok[i] = false;
	}	
	for(int i=361; i<n_runs; i++)
	{
		compton_edge_ok[i] = true;
	}
	
	// OP Delay.
	for(int i=0; i<=449; i++)
	{
		OP_Delay[i] = 300.0;
	}
	for(int i=450; i<=477; i++)
	{
		OP_Delay[i] = 700.0;
	}
	for(int i=478; i<n_runs; i++)
	{
		OP_Delay[i] = 400.0;
	}
	//
	init_ElectricField();
	init_sumdiffs();
	init_goodrecoil();
	init_goodelectron();
	init_iqdc();
	init_usable();
	
	return;
}







