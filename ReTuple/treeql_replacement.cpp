// OK.  I'm'a want some nice global variables here.

class set_of_runs
{
private:
public:
	const static int n_runs = 517;

	bool compton_edge_ok[n_runs];
	double OP_Delay[n_runs];
	//
	double x_sumdiff_min[n_runs];  // done.
	double x_sumdiff_max[n_runs];  // done.
	double z_sumdiff_min[n_runs];  // done.
	double z_sumdiff_max[n_runs];  // done.
	int sumdiff_set[n_runs];
//	void init_xsumdiff_min();      // done.
//	void init_xsumdiff_max();      // done.
//	void init_zsumdiff_min();      // done.
//	void init_zsumdiff_max();      // done.
	void init_sumdiffs();
	bool good_recoil[n_runs];      
	void init_goodrecoil();        
	bool good_electron[n_runs]; // done.
	void init_goodelectron();   // done.

	double iqdc_min[n_runs];
	double iqdc_max[n_runs];
	void init_iqdc();
	
	bool usable[n_runs];
	void init_usable();
	
	double ElectricField[n_runs];
	void init_ElectricField();
	
	set_of_runs();	// done.
};

void set_of_runs::init_sumdiffs()
{
	// cuts are created using the "recoils only" spectra.
	for(int i=0; i<n_runs; i++)
	{
		sumdiff_set[i] = 0;
		x_sumdiff_min[i] = 0.0;
		x_sumdiff_max[i] = 0.0;
		z_sumdiff_min[i] = 0.0;
		z_sumdiff_max[i] = 0.0;
		
		if(i>=342 && i<=368)
		{
			sumdiff_set[i] = 1;
		}
		else if(i>368 && i<=449)  // contains all of 535 + "most" of 395
		{
			sumdiff_set[i] = 2;   // split??  ... no, most are just double-peaked.
			/*
			// using "recoils only" sums.
			// x: max:  x~-904, y~7659.
			// x: 1% at 77:  -1107, -812
			1  Constant     7.97274e+03   1.45735e+01   0.00000e+00  -1.15903e-08
			2  Mean        -9.30598e+02   9.26961e-02   0.00000e+00  -1.20227e-05
			3  Sigma        4.50505e+01   4.78554e-02  -0.00000e+00   9.13269e-04
			*/
			x_sumdiff_min[i] = -1107.0;
			x_sumdiff_max[i] =  -812.0;
			/*
			// z: max:  x~-302, y~-7696.
			// z:  1% at 77:  -509, -206
			1  Constant     8.06795e+03   1.45258e+01  -0.00000e+00   1.77857e-08
			2  Mean        -3.22556e+02   9.07358e-02  -0.00000e+00   1.89920e-05
			3  Sigma        4.33450e+01   4.24046e-02   0.00000e+00  -4.77916e-03
			*/
			z_sumdiff_min[i] = -509.0;
			z_sumdiff_max[i] = -206.0;
		}
		else if(i==450)  // 395
		{
			sumdiff_set[i] = 3;
			/*
			// x:  max:  x~-883, y=2079.
			// x:  1% at 21:  -1095, -796.
			1  Constant     1.92812e+03   7.76429e+00   3.09076e-01   3.93576e-07
			2  Mean        -9.08836e+02   1.91320e-01   7.15720e-03   1.93540e-04
			3  Sigma        4.46323e+01   1.17634e-01   2.55442e-05   3.94055e-02
			*/
			x_sumdiff_min[i] = -1095.0;
			x_sumdiff_max[i] =  -796.0;
			/*
			// z:  max:  x~-272, y=1597.
			// z:  1% at 16:  -503, -185.
			1  Constant     1.52950e+03   6.65896e+00   0.00000e+00  -2.98355e-09
			2  Mean        -3.07042e+02   2.31308e-01   0.00000e+00   2.25597e-05
			3  Sigma        4.61571e+01   1.27832e-01  -0.00000e+00   9.29244e-03
			*/
			z_sumdiff_min[i] = -503.0;
			z_sumdiff_max[i] = -185.0;
		}
		else if(i>450 && i<=465) // 395, 415
		{
			sumdiff_set[i] = 4;   // split??  ..no, just double-peaked.
			/*
			// x:  max:  x~-865, y=5885
			// x:  1% at 59:  -1095, -784
			1  Constant     5.90446e+03   1.30596e+01   0.00000e+00   3.76755e-09
			2  Mean        -9.02161e+02   1.17982e-01   0.00000e+00  -2.13032e-06
			3  Sigma        4.47743e+01   6.15389e-02  -0.00000e+00   7.21397e-04
			*/
			x_sumdiff_min[i] = -1095.0;
			x_sumdiff_max[i] =  -784.0;
			/*
			// z:  max:  x~-261, y=5711
			// z:  1% at 57:  -479, -180
			1  Constant     5.94610e+03   1.23461e+01  -0.00000e+00   2.02776e-08
			2  Mean        -2.99396e+02   1.05357e-01  -0.00000e+00   6.76870e-06
			3  Sigma        4.47357e+01   5.12118e-02   0.00000e+00  -2.07758e-03
			*/
			z_sumdiff_min[i] = -479.0;
			z_sumdiff_max[i] = -180.0;
		}
		else if(i==466) // 415
		{
			sumdiff_set[i] = 5;  // "split?"  ...yeah, no.
			/*
			// x:  max:  x~-854, y=1762
			// x:  1% at 18:  -1095, -778
			1  Constant     1.61514e+03   6.87336e+00   0.00000e+00  -6.15822e-09
			2  Mean        -8.96444e+02   2.42204e-01   0.00000e+00   8.35705e-07
			3  Sigma        4.47080e+01   1.19322e-01  -0.00000e+00   1.92561e-02
			*/
			x_sumdiff_min[i] = -1095.0;
			x_sumdiff_max[i] =  -778.0;
			/*
			// z:  max:  x~-253, y=1717
			// z:  1% at 17:  -487, -174
			1  Constant     1.60307e+03   6.71826e+00  -0.00000e+00   2.26346e-08
			2  Mean        -2.90987e+02   2.27861e-01  -0.00000e+00   4.04235e-06
			3  Sigma        4.48301e+01   1.14282e-01   0.00000e+00  -8.69599e-04
			*/
			z_sumdiff_min[i] = -487.0;
			z_sumdiff_max[i] = -174.0;
		}
		else if(i==473)  // 415
		{
			sumdiff_set[i] = 6;
		}
		else if(i==474)  // 415
		{
			sumdiff_set[i] = 7;
		}
		else if(i>474 && i<=498)  // 415
		{
			sumdiff_set[i] = 8;
		}
		else if(i==499) // 415
		{
			sumdiff_set[i] = 9;
		}
		else if(i==509)  // 415
		{
			sumdiff_set[i] = 10;
		}
	}
	// ok, now later on I can actually put in values.
}

/*
void set_of_runs::init_xsumdiff_min()
{
	double arr[517] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1080.0, 0.0, 0.0, 0.0, 0.0, -1050.0, -1050.0, -1050.0, -1050.0, -1050.0, -1050.0, 0.0, 0.0, 0.0, 0.0, -1150.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1150.0, -1300.0, -1340.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1270.0, 0.0, -1300.0, -1300.0, -1300.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1300.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1300.0, 0.0, -1100.0, -1100.0, 0.0, 0.0, 0.0, 0.0, -1100.0, -1100.0, -1100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1100.0, -1100.0, -1100.0, 0.0, -1100.0, -1100.0, -1100.0, -1100.0, -1100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1100.0, -1100.0, -1100.0, -1100.0, -1100.0, -1100.0, -1100.0, -1100.0, -1100.0, -1100.0, -1100.0, 0.0, -1100.0, -1100.0, -1100.0, -1100.0, -1100.0, -1100.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1100.0, -1100.0, 0.0, -1100.0, -1120.0, 0.0, 0.0, 0.0, -1100.0, -1100.0, 0.0, 0.0, 0.0, 0.0, -1120.0, -1120.0, -1120.0, -1120.0, -1120.0, -1120.0, -1140.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1160.0, -1200.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1120.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1120.0, -1120.0, -1120.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1160.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
	
	for (int i=0; i <517; i++)
	{
		x_sumdiff_min[i] = arr[i];
	}
}
void set_of_runs::init_xsumdiff_max()
{
	double arr[517] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -840.0, 0.0, 0.0, 0.0, 0.0, -840.0, -840.0, -840.0, -840.0, -840.0, -840.0, 0.0, 0.0, 0.0, 0.0, -830.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -840.0, -910.0, -910.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -890.0, 0.0, -980.0, -980.0, -980.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -980.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1000.0, 0.0, -810.0, -810.0, 0.0, 0.0, 0.0, 0.0, -810.0, -810.0, -810.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -810.0, -800.0, -810.0, 0.0, -810.0, -810.0, -810.0, -810.0, -810.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -810.0, -810.0, -810.0, -810.0, -810.0, -810.0, -810.0, -810.0, -810.0, -810.0, -810.0, 0.0, -810.0, -810.0, -810.0, -810.0, -810.0, -810.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -810.0, -810.0, 0.0, -810.0, -770.0, 0.0, 0.0, 0.0, -770.0, -770.0, 0.0, 0.0, 0.0, 0.0, -770.0, -770.0, -770.0, -770.0, -770.0, -770.0, -770.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -780.0, -790.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -770.0, 0.0, 0.0, 0.0, 0.0, 0.0, -770.0, -770.0, -800.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -790.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
	
	for (int i=0; i <517; i++)
	{
		x_sumdiff_max[i] = arr[i];
	}
}
void set_of_runs::init_zsumdiff_min()
{
	double arr[517] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -470.0, 0.0, 0.0, 0.0, 0.0, -470.0, -470.0, -470.0, -470.0, -450.0, -450.0, 0.0, 0.0, 0.0, 0.0, -530.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -530.0, -700.0, -740.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -670.0, 0.0, -660.0, -660.0, -660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -660.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -660.0, 0.0, -500.0, -500.0, 0.0, 0.0, 0.0, 0.0, -500.0, -500.0, -500.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -500.0, -500.0, -500.0, 0.0, -500.0, -500.0, -500.0, -500.0, -500.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -500.0, -500.0, -500.0, -500.0, -500.0, -500.0, -500.0, -500.0, -500.0, -500.0, -500.0, 0.0, -500.0, -500.0, -500.0, -500.0, -500.0, -500.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -500.0, -500.0, 0.0, -500.0, -530.0, 0.0, 0.0, 0.0, -500.0, -500.0, 0.0, 0.0, 0.0, 0.0, -500.0, -500.0, -500.0, -500.0, -500.0, -500.0, -540.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -550.0, -600.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -500.0, 0.0, 0.0, 0.0, 0.0, 0.0, -500.0, -500.0, -500.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -580.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
	
	for (int i=0; i <517; i++)
	{
		z_sumdiff_min[i] = arr[i];
	}
}
void set_of_runs::init_zsumdiff_max()
{
	double arr[517] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -230.0, 0.0, 0.0, 0.0, 0.0, -230.0, -220.0, -230.0, -220.0, -230.0, -230.0, 0.0, 0.0, 0.0, 0.0, -230.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -230.0, -320.0, -320.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -310.0, 0.0, -380.0, -370.0, -380.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -390.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -400.0, 0.0, -200.0, -200.0, 0.0, 0.0, 0.0, 0.0, -200.0, -200.0, -200.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -200.0, -200.0, -200.0, 0.0, -200.0, -200.0, -200.0, -200.0, -200.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -200.0, -200.0, -200.0, -200.0, -200.0, -200.0, -200.0, -200.0, -200.0, -200.0, -200.0, 0.0, -200.0, -200.0, -200.0, -200.0, -200.0, -200.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -200.0, -200.0, 0.0, -200.0, -170.0, 0.0, 0.0, 0.0, -170.0, -170.0, 0.0, 0.0, 0.0, 0.0, -170.0, -170.0, -170.0, -170.0, -170.0, -170.0, -160.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -180.0, -180.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -170.0, 0.0, 0.0, 0.0, 0.0, 0.0, -170.0, -170.0, -200.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -170.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
	
	for (int i=0; i <517; i++)
	{
		z_sumdiff_max[i] = arr[i];
	}
}
*/

void set_of_runs::init_goodelectron()
{
	for(int i=0; i<n_runs; i++)
	{
		good_electron[i] = false;
	}
	
	good_electron[314] = true;
	good_electron[362] = true;
	good_electron[363] = true;
	
	for(int i=383; i<=386; i++)
	{
		good_electron[i] = true;
	}
	good_electron[393] = true;
	good_electron[420] = true;
	for(int i=428; i<=437; i++)
	{
		good_electron[i] = true;
	}	
	for(int i=440; i<=445; i++)
	{
		good_electron[i] = true;
	}	
	for(int i=476; i<=489; i++)
	{
		good_electron[i] = true;
	}	
	for(int i=502; i<=505; i++)
	{
		good_electron[i] = true;
	}	
	good_electron[510] = true;
	good_electron[513] = true;
}

void set_of_runs::init_ElectricField()
{
	for(int i=0; i<n_runs; i++)
	{
		ElectricField[i] = 0.0;
	}
	
	for(int i=298; i<=313; i++)
	{
		ElectricField[i] = 395.0;
	}
	ElectricField[314] = 66.7;
	for(int i=316; i<=361; i++)
	{
		ElectricField[i] = 395.0;
	}
	for(int i=362; i<=367; i++)
	{
		ElectricField[i] = 66.7;
	}
	for(int i=368; i<=378; i++)
	{
		ElectricField[i] = 395.0;
	}
	for(int i=379; i<=393; i++)
	{
		ElectricField[i] = 66.7;
	}
	for(int i=394; i<=405; i++)
	{
		ElectricField[i] = 395.0;
	}

	for(int i=409; i<=419; i++)
	{
		ElectricField[i] = 535.0;
	}
	ElectricField[420] = 66.7;
	for(int i=421; i<=426; i++)
	{
		ElectricField[i] = 535.0;
	}
	for(int i=427; i<=445; i++)
	{
		ElectricField[i] = 150.0;
	}
	for(int i=446; i<=449; i++)
	{
		ElectricField[i] = 535.0;
	}
	for(int i=450; i<=457; i++)
	{
		ElectricField[i] = 395.0;
	}
	for(int i=459; i<=475; i++)
	{
		ElectricField[i] = 415.0;
	}
	for(int i=476; i<=489; i++)
	{
		ElectricField[i] = 150.0;
	}
	for(int i=491; i<=499; i++)
	{
		ElectricField[i] = 415.0;
	}
	for(int i=502; i<=507; i++)
	{
		ElectricField[i] = 150.0;
	}
	ElectricField[509] = 415.0;
	for(int i=510; i<=516; i++)
	{
		ElectricField[i] = 150.0;
	}
}

void set_of_runs::init_goodrecoil()
{
	for(int i=0; i<n_runs; i++)
	{
		good_recoil[i] = false;
	}	
	good_recoil[303] = true;
	good_recoil[308] = true;
	good_recoil[309] = true;
	good_recoil[310] = true;
	good_recoil[311] = true;
	good_recoil[312] = true;
	good_recoil[313] = true;
	good_recoil[318] = true;
	good_recoil[326] = true;
	good_recoil[327] = true;
	good_recoil[328] = true;
	good_recoil[340] = true;
	good_recoil[342] = true;
	good_recoil[343] = true;
	good_recoil[361] = true;
	good_recoil[368] = true;
	good_recoil[370] = true;
	good_recoil[371] = true;
	good_recoil[376] = true;
	good_recoil[377] = true;
	good_recoil[378] = true;  // is it really ok??
	good_recoil[394] = true;
	good_recoil[395] = true;
	good_recoil[396] = true;
	for(int i=398; i<=402; i++)
	{
		good_recoil[i] = true;
	}
	for(int i=409; i<=419; i++)
	{
		good_recoil[i] = true;
	}
	for(int i=421; i<=426; i++)
	{
		good_recoil[i] = true;
	}
	good_recoil[446] = true;
	good_recoil[447] = true;
	good_recoil[449] = true;
	good_recoil[450] = true;
	good_recoil[454] = true;
	good_recoil[455] = true;
	for(int i=460; i<=466; i++)
	{
		good_recoil[i] = true;
	}
	good_recoil[473] = true;
	good_recoil[474] = true;
	good_recoil[491] = true;
	good_recoil[497] = true;
	good_recoil[498] = true;
	good_recoil[499] = true;
	good_recoil[509] = true;
}

void set_of_runs::init_usable()
{
	for(int i=0; i<n_runs; i++)
	{
		usable[i] = true;
		if(/*i==361 || i==368 || i==370 || i==371*/ i<=371 || i==497)
		{
			usable[i] = false;
		}
	}
}

void set_of_runs::init_iqdc()
{
	for(int i=0; i<n_runs; i++)
	{
		// Defaults:
		iqdc_min[i] = 0.0;
		iqdc_max[i] = 500.0;
		
		if(i>=376 && i<=449)
		{
			iqdc_min[i] = 192;
			iqdc_max[i] = 280;
		}
	}
}

set_of_runs::set_of_runs()
{
	// Compton Edge.
	for(int i=0; i<361; i++)
	{
		compton_edge_ok[i] = false;
	}	
	for(int i=361; i<n_runs; i++)
	{
		compton_edge_ok[i] = true;
	}
	
	// OP Delay.
	for(int i=0; i<=449; i++)
	{
		OP_Delay[i] = 300.0;
	}
	for(int i=450; i<=477; i++)
	{
		OP_Delay[i] = 700.0;
	}
	for(int i=478; i<n_runs; i++)
	{
		OP_Delay[i] = 400.0;
	}
	//
	init_ElectricField();
//	init_xsumdiff_min();
//	init_xsumdiff_max();
//	init_zsumdiff_min();
//	init_zsumdiff_max();
	init_sumdiffs();
	init_goodrecoil();
	init_goodelectron();
	init_iqdc();
	init_usable();
	
	return;
}







